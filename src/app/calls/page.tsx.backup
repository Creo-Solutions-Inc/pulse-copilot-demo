'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Card from '@/components/Card';
import InputField from '@/components/InputField';
import callsData from '@/data/calls.json';
import { 
  Search, 
  Filter, 
  Phone, 
  TrendingUp, 
  TrendingDown, 
  Minus,
  ArrowRight
} from 'lucide-react';

interface CallData {
  id: string;
  time: string;
  internalNumber: string;
  externalNumber: string;
  callType: string;
  callOutcome: string;
  sentiment: string;
  qualityScore: number;
  duration: string;
  summary: string;
  actionItems: string[];
}

export default function CallListPage() {
  const [calls, setCalls] = useState<CallData[]>([]);
  const [filteredCalls, setFilteredCalls] = useState<CallData[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [callTypeFilter, setCallTypeFilter] = useState('');
  const [callOutcomeFilter, setCallOutcomeFilter] = useState('');
  const router = useRouter();

  useEffect(() => {
    // Load calls data
    setCalls(callsData as CallData[]);
    setFilteredCalls(callsData as CallData[]);
  }, []);

  useEffect(() => {
    // Apply filters
    let filtered = calls;

    if (searchTerm) {
      filtered = filtered.filter(call =>
        call.internalNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        call.externalNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        call.summary.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    if (callTypeFilter) {
      filtered = filtered.filter(call => call.callType === callTypeFilter);
    }

    if (callOutcomeFilter) {
      filtered = filtered.filter(call => call.callOutcome === callOutcomeFilter);
    }

    setFilteredCalls(filtered);
  }, [calls, searchTerm, callTypeFilter, callOutcomeFilter]);

  const getSentimentColor = (sentiment: string) => {
    switch (sentiment) {
      case 'Positive': return 'bg-green-100 text-green-800';
      case 'Negative': return 'bg-red-100 text-red-800';
      default: return 'bg-yellow-100 text-yellow-800';
    }
  };

  const getSentimentIcon = (sentiment: string) => {
    switch (sentiment) {
      case 'Positive': return <TrendingUp size={14} />;
      case 'Negative': return <TrendingDown size={14} />;
      default: return <Minus size={14} />;
    }
  };

  const getQualityColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const handleRowClick = (callId: string) => {
    router.push(`/calls/${callId}`);
  };

  const uniqueCallTypes = [...new Set(calls.map(call => call.callType))];
  const uniqueCallOutcomes = [...new Set(calls.map(call => call.callOutcome))];

  return (
    <div className="p-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Call List</h1>
        <p className="text-gray-600">View all calls from the past 30 days</p>
      </div>

      <div className="space-y-6">
        {/* Filters */}
        <Card title="Search & Filters">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search by number or summary..."
                className="w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Call Type
              </label>
              <select
                value={callTypeFilter}
                onChange={(e) => setCallTypeFilter(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
              >
                <option value="">All Types</option>
                {uniqueCallTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Call Outcome
              </label>
              <select
                value={callOutcomeFilter}
                onChange={(e) => setCallOutcomeFilter(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
              >
                <option value="">All Outcomes</option>
                {uniqueCallOutcomes.map(outcome => (
                  <option key={outcome} value={outcome}>{outcome}</option>
                ))}
              </select>
            </div>

            <div className="flex items-end">
              <div className="text-sm text-gray-500 flex items-center">
                <Filter size={16} className="mr-1" />
                {filteredCalls.length} of {calls.length} calls
              </div>
            </div>
          </div>
        </Card>

        {/* Calls Table */}
        <Card title="Call History">
          <div className="overflow-x-auto">
            <table className="min-w-full bg-white border border-gray-200 rounded-lg">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Time
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Internal #
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    External #
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Call Type
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Call Outcome
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Sentiment Score
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Action
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredCalls.map((call) => (
                  <tr 
                    key={call.id} 
                    className="hover:bg-gray-50 cursor-pointer transition-colors"
                    onClick={() => handleRowClick(call.id)}
                  >
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {new Date(call.time).toLocaleString()}
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      <div className="flex items-center">
                        <Phone size={14} className="mr-2 text-gray-400" />
                        {call.internalNumber}
                      </div>
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {call.externalNumber}
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {call.callType}
                    </td>
                    <td className="px-4 py-3 text-sm text-gray-900">
                      {call.callOutcome}
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getSentimentColor(call.sentiment)}`}>
                          {getSentimentIcon(call.sentiment)}
                          <span className="ml-1">{call.sentiment}</span>
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <ArrowRight size={16} className="text-gray-400" />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {filteredCalls.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              No calls found matching your filters.
            </div>
          )}
        </Card>
      </div>
    </div>
  );
} 